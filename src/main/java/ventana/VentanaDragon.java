package ventana;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class VentanaDragon extends javax.swing.JFrame {

    static int lanza = 2, pocion = 3, escudo = 1, resistencia = 0;
    public static String evntDr;
    static JLabel lblEventos = new JLabel("");
    // private static String evento = "";

    /**
     * Creates new form VentanaDragon
     */
    public VentanaDragon() {

        initComponents();
        this.setLocationRelativeTo(null);

        // Llenado del combo Items
        cmbItems.removeAllItems();
        cmbItems.addItem("Lanza x" + lanza);
        cmbItems.addItem("Poción x" + pocion);
        cmbItems.addItem("Escudo x" + escudo);

        lblEventos.setBounds(20, 400, 365, 70);
        this.add(lblEventos);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnUsar = new javax.swing.JButton();
        btnAtacar = new javax.swing.JButton();
        cmbItems = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 0));

        btnUsar.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        btnUsar.setText("Usar");
        btnUsar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUsarActionPerformed(evt);
            }
        });

        btnAtacar.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        btnAtacar.setText("Atacar");
        btnAtacar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtacarActionPerformed(evt);
            }
        });

        cmbItems.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        cmbItems.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setFont(new java.awt.Font("Centaur", 1, 24)); // NOI18N
        jLabel1.setText("¡Ataca al dragón!");

        jLabel2.setFont(new java.awt.Font("Centaur", 0, 14)); // NOI18N
        jLabel2.setText("Item");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnUsar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAtacar))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(cmbItems, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 184, Short.MAX_VALUE))))
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbItems, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUsar)
                    .addComponent(btnAtacar))
                .addContainerGap(146, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAtacarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtacarActionPerformed
        // Al utilizar un botón, ambos se deshabilitan por 5 segundos
        btnUsar.setEnabled(false);
        btnAtacar.setEnabled(false);

        // Utilizar el ataque Standar del jugador
        Jugador jug2 = new Jugador();
        jug2.ataqueStandar();
        lblEventos.setText(jug2.evnt);

        // Timer para habilitar los botones luego de 5 segundos
        Timer timerBtn = new Timer();
        TimerTask habilitarBtn = new TimerTask() {
            @Override
            public void run() {
                if (!btnUsar.isEnabled() && lanza > 0 || pocion > 0 || escudo > 0) {
                    btnUsar.setEnabled(true);
                }
                if (!btnAtacar.isEnabled()) {
                    btnAtacar.setEnabled(true);
                }
            }
        };
        timerBtn.schedule(habilitarBtn, 2000);
    }//GEN-LAST:event_btnAtacarActionPerformed

    private void btnUsarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUsarActionPerformed
        // Al utilizar un botón, ambos se deshabilitan por 5 segundos
        btnUsar.setEnabled(false);
        btnAtacar.setEnabled(false);

        // Utilizar el Item Lanza (30 puntos de daño, 50% de precisión)
        if (cmbItems.getSelectedItem().equals("Lanza x" + lanza) && lanza > 0) {
            Random rand = new Random();
            int presicionJugador = rand.nextInt(100);
            if (presicionJugador > 50) {
                Dragon dr2 = new Dragon();
                dr2.vidaDragon -= 30;
                lblEventos.setText("¡Atacaste al dragón con la lanza! \nAl dragón le quedan " + dr2.vidaDragon + " puntos de vida");
            } else {
                lblEventos.setText("¡Fallaste!");
            }
            lanza--;
        }

        // Utilizar el Item Poción (aumenta 25 puntos de vida para el jugado)
        if (cmbItems.getSelectedItem().equals("Poción x" + pocion) && pocion > 0) {
            Jugador jug2 = new Jugador();
            jug2.vidaJugador += 25;
            lblEventos.setText("Recuperaste 25 puntos de vida \nTe quedan " + jug2.vidaJugador + " puntos de vida");
            pocion--;
        }

        // Utilizar el Item Escudo (reduce el daño del dragón a la mitad, resiste 3 golpes)
        if (cmbItems.getSelectedItem().equals("Escudo x" + escudo) && escudo > 0) {
            resistencia = 3;
            escudo--;
            lblEventos.setText("Activaste tu escudo " + "\n Recibirás la mitad de daño");
        }

        // Timer para habilitar los botones luego de 5 segundos
        Timer timerBtn = new Timer();
        TimerTask habilitarBtn = new TimerTask() {
            @Override
            public void run() {
                if (!btnUsar.isEnabled() && lanza > 0 || pocion > 0 || escudo > 0) {
                    btnUsar.setEnabled(true);
                }
                if (!btnAtacar.isEnabled()) {
                    btnAtacar.setEnabled(true);
                }
            }
        };
        timerBtn.schedule(habilitarBtn, 2000);

        // Actualizar lista de Items
        cmbItems.removeAllItems();
        cmbItems.addItem("Lanza x" + lanza);
        cmbItems.addItem("Poción x" + pocion);
        cmbItems.addItem("Escudo x" + escudo);

        // Remover los Items que se hayan acabado
        if (lanza == 0) {
            cmbItems.removeItem("Lanza x" + lanza);
        }
        if (pocion == 0) {
            cmbItems.removeItem("Poción x" + pocion);
        }
        if (escudo == 0) {
            cmbItems.removeItem("Escudo x" + escudo);
        }

        // Deshabilitar permanentemente el botón Usar cuando no queda ningú Item
        if (lanza == 0 && pocion == 0 && escudo == 0)
            btnUsar.setEnabled(false);
    }//GEN-LAST:event_btnUsarActionPerformed

    /* public void setEvento(String evento) {
        VentanaDragon.evento = evento;
    }*/
    /**
     * @param args the command line arguments
     */
    Dragon dr = new Dragon();

    public static void main(String args[]) {

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaDragon().setVisible(true);
            }

        });

        // Ataque del dragón, se itera cada 7 segundos 
        Timer timerDragon = new Timer();
        TimerTask tareaDragon = new TimerTask() {
            @Override
            public void run() {
                // Dragon dr1 = new Dragon();
                // if (dr1.vidaDragon > 0 && Jugador.vidaJugador > 0) {
                ataqueDragon();
                actualizarLabel();
                /*} else {
                    dr1.vidaDragon = 0;
                    // timerDragon.cancel();
                    JOptionPane.showMessageDialog(null, "¡Mataste al dragón! Tu autoestima subió un nivel \n Fin del juego");
                }

                if (Jugador.vidaJugador <= 0) {
                    Jugador.vidaJugador = 0;
                    //  timerDragon.cancel();
                    JOptionPane.showMessageDialog(null, "¡El dragón te mató! \n Fin del juego");

                }*/
            }

        };
        timerDragon.schedule(tareaDragon, 30, 3000);
    }

    public static void ataqueDragon() {
        // Ataque delDragón(30 puntos de daño, 50% de precisión)
        //Si el jugador activa el escudo, el daño del dragón se reduce a la mitad

        Jugador jug2 = new Jugador();
        Dragon dr1 = new Dragon();
        if (dr1.vidaDragon > 0 && Jugador.vidaJugador > 0) {
            if (VentanaDragon.resistencia > 0) { // Escudo activado
                Random rand = new Random();
                int presicionDragon = rand.nextInt(100);
                if (presicionDragon > 50) {
                    jug2.vidaJugador -= 15;
                    evntDr = "¡El dragón te atacó! \nTe quedan " + jug2.vidaJugador + " puntos de vida";
                    VentanaDragon.resistencia--;
                    if (VentanaDragon.resistencia == 0) {
                        evntDr += "\n¡El escudo se destruyó!";
                    }
                } else {
                    evntDr = "¡El dragón intentó atacarte y falló! \nTe quedan " + jug2.vidaJugador + " puntos de vida";
                }
            } else { // Escudo desactivado o destruído
                Random rand = new Random();
                int presicionDragon = rand.nextInt(100);
                if (presicionDragon > 50) {
                    jug2.vidaJugador -= 30;
                    evntDr = "¡El dragón te atacó! \nTe quedan " + jug2.vidaJugador + " puntos de vida";
                } else {
                    evntDr = "¡El dragón intentó atacarte y falló! \nTe quedan " + jug2.vidaJugador + " puntos de vida";
                }
            }

        } else {
            dr1.vidaDragon = 0;
            // timerDragon.cancel();
            JOptionPane.showMessageDialog(null, "¡Mataste al dragón! Tu autoestima subió un nivel \n Fin del juego");
        }

        if (Jugador.vidaJugador <= 0) {
            Jugador.vidaJugador = 0;
            //  timerDragon.cancel();
            JOptionPane.showMessageDialog(null, "¡El dragón te mató! \n Fin del juego");

        }

    }

    public static void actualizarLabel() {
        VentanaDragon vd = new VentanaDragon();
        vd.lblEventos.setText(vd.evntDr);
        System.out.println(lblEventos.getText());
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAtacar;
    private javax.swing.JButton btnUsar;
    private javax.swing.JComboBox<String> cmbItems;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
